CMAKE_MINIMUM_REQUIRED(VERSION 3.17)   
PROJECT(PG_SDC_GUI VERSION 1.0.0.0)    

if(WIN32)
    # set(Qt5_DIR "${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/lib/cmake/Qt5")
    set(Qt5_DIR "${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/lib/cmake/Qt5")
endif()

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON) 
set(CMAKE_AUTORCC ON)
# set(ENABLE_PRECOMPILED_HEADERS OFF)

add_definitions(-D_POSIX)

message("SUB PROJECT_SOURCE_DIR:" ${PROJECT_SOURCE_DIR})
message("SUB PROJECT_NAME:" ${PROJECT_NAME})

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgGUI")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgGUI/PgHelp")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgGUI/PgEC")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgGUI/PgSC")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgGUI/PgED")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgGUI/PgSS")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgGUI/PgDM")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgFunc")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../src/PgConfig")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendorsrc/easyloggingpp")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendorsrc/cJSON")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendorsrc/qwt")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendorsrc/mosquitto")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendorsrc/QXlsx")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendorsrc/QkeyTools")

if(WIN32)
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtCore/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtGui/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtWidgets/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtSql/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtOpenGL/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtConcurrent/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtPrintSupport/")
    # INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/include/QtSvg/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtCore/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtGui/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtWidgets/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtSql/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtOpenGL/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtConcurrent/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtPrintSupport/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtSvg/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtSerialPort/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtCore/5.5.0/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtGui/5.5.0/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtGui/5.5.0/QtGui/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/include/QtGui/5.5.0/QtGui/private/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/opencv341/include/")
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/ISDP-4.4.0.3-WIN-10-X64/include/")
elseif(UNIX)
    INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/../../vendor/opencv3414/include")
endif()

AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgGUI DIR_PGGUI)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgGUI/PgHelp DIR_PGGUI_PGHELP)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgGUI/PgEC DIR_PGGUI_PGEC)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgGUI/PgSC DIR_PGGUI_PGSC)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgGUI/PgED DIR_PGGUI_PGED)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgGUI/PgSS DIR_PGGUI_PGSS)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgGUI/PgDM DIR_PGGUI_PGDM)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../PgFunc DIR_PGFUNC)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../../vendorsrc/easyloggingpp DIR_VENDORSRC_EASYLOGGINGPP)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../../vendorsrc/cJSON DIR_VENDORSRC_CJSON)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../../vendorsrc/qwt DIR_VENDORSRC_QWT)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../../vendorsrc/mosquitto DIR_VENDORSRC_MOSQUITTO)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../../vendorsrc/QXlsx DIR_VENDORSRC_QXLSX)
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../../vendorsrc/QkeyTools DIR_VENDORSRC_QkEYTOOLS)

find_package(Qt5 COMPONENTS Widgets Core Gui REQUIRED)

if(WIN32)
    # link_directories("${PROJECT_SOURCE_DIR}/../../vendor/QT5.15.3_MinGW_X64/lib" "./")
    link_directories("${PROJECT_SOURCE_DIR}/../../vendor/QT5.5.0_MinGW510_X64/lib" "./")
    link_libraries(Qt5Widgets Qt5Core Qt5Gui Qt5Sql Qt5OpenGL Qt5Concurrent Qt5PrintSupport Qt5Svg Qt5SerialPort)
    link_directories("${PROJECT_SOURCE_DIR}/../../vendor/opencv341/lib" "./")
    link_libraries(libopencv_core341.dll)
    link_directories("${PROJECT_SOURCE_DIR}/../../vendor/ISDP-4.4.0.3-WIN-10-X64/lib" "./")
    link_libraries(libHY_ISDP_DATAPROCESS.dll)
elseif(UNIX)
    link_directories("${PROJECT_SOURCE_DIR}/../../vendor/opencv3414/lib64" "./")
    link_libraries(opencv_core)
endif()

# if(WIN32)
    # set(CMAKE_RC_COMPILER_INIT windres)
    # ENABLE_LANGUAGE(RC)
    # SET(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")
# endif()

qt5_add_resources(QRC_FILES ${PROJECT_SOURCE_DIR}/../PgResource/image.qrc)
# set(RC_FILES ${PROJECT_SOURCE_DIR}/../PgResource/main.rc)
# set(ICON_PATH "${PROJECT_SOURCE_DIR}/../PgResource/image/logo.ico")

if("${CMAKE_BUILD_TYPE}" MATCHES "Debug")
  message(STATUS "building2 for: Debug")
  set(EXECUTABLE_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/../../bin/Debug")
elseif("${CMAKE_BUILD_TYPE}" MATCHES "Release")
  message(STATUS "building2 for: Release")
  set(EXECUTABLE_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/../../bin/Release")
endif()

if(WIN32)
    # 加上WIN32表示去掉CONSOLE
    add_executable(${PROJECT_NAME} WIN32 ${DIR_PGGUI} ${DIR_PGGUI_PGHELP} ${DIR_PGGUI_PGDM} ${DIR_VENDORSRC_QkEYTOOLS} ${DIR_PGGUI_PGEC} ${DIR_PGGUI_PGSC} ${DIR_PGFUNC} ${DIR_PGGUI_PGED} ${DIR_PGGUI_PGSS} ${DIR_VENDORSRC_EASYLOGGINGPP} ${DIR_VENDORSRC_CJSON} ${DIR_VENDORSRC_QWT} ${DIR_VENDORSRC_MOSQUITTO} ${DIR_VENDORSRC_QXLSX} ${QRC_FILES})
    target_link_libraries(${PROJECT_NAME} ws2_32 ${PROJECT_SOURCE_DIR}/../PgResource/version.o)
    # target_sources(${PROJECT_NAME} PRIVATE ${RC_FILES})
elseif(UNIX)
    target_link_libraries(${PROJECT_NAME} -Wl,-rpath=./ dl m pthread rt)
endif()
# set_target_properties(${PROJECT_NAME} PROPERTIES RESOURCE_ICONS "${PROJECT_SOURCE_DIR}/../PgResource/image/logo.ico")
